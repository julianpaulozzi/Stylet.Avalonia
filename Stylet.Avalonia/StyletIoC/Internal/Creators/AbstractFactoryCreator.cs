using System;
using System.Linq.Expressions;
using Stylet.Avalonia.StyletIoC.Creation;
using System.Diagnostics;

namespace Stylet.Avalonia.StyletIoC.Internal.Creators;

/// <summary>
/// Knows how to create an instance of an abstract factory (generated by Container.GetFactoryForType)
/// </summary>
internal class AbstractFactoryCreator : ICreator
{
    private readonly Type abstractFactoryType;
    public RuntimeTypeHandle TypeHandle
    {
        get { return abstractFactoryType.TypeHandle; }
    }

    public AbstractFactoryCreator(Type abstractFactoryType)
    {
        this.abstractFactoryType = abstractFactoryType;
    }

    public Expression GetInstanceExpression(ParameterExpression registrationContext)
    {
        var ctor = abstractFactoryType.GetConstructor(new[] { typeof(IRegistrationContext) });
        Debug.Assert(ctor != null);
        var construction = Expression.New(ctor, registrationContext);
        return construction;
    }
}
